{"ast":null,"code":"import { filter, Subscription, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/state.service\";\nimport * as i2 from \"@angular/common\";\nexport class RolexComponent {\n  constructor(stateService) {\n    this.stateService = stateService;\n    this.time = 0;\n    this.time$ = new Observable();\n  }\n\n  ngOnInit() {//Megoldás1\n    //   this.stateService.clock$.subscribe((t) => {\n    //     this.time = t - t % 5,\n    //     if (t % 5 === 0 && t > 0) {\n    //       console.log(t ===0 ? 'Kezdés' : 'Váltás' ${t - 5} '->' ${t});\n    //     }\n    //   });\n    // }\n    //megoldás2\n    // this.clockSubscription = this.stateService.clock$.pipe(filter((t) => t % 5 === 0)).subscribe((t) => {\n    //   console.log(t === 0 ? `kezdés` : `váltás ${t - 5} -> ${t}`);\n    //   this.time = t;\n    // });\n  }\n\n}\n\nRolexComponent.ɵfac = function RolexComponent_Factory(t) {\n  return new (t || RolexComponent)(i0.ɵɵdirectiveInject(i1.StateService));\n};\n\nRolexComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RolexComponent,\n  selectors: [[\"app-rolex\"]],\n  decls: 3,\n  vars: 3,\n  template: function RolexComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"Eltelt id\\u0151: \", i0.ɵɵpipeBind1(2, 1, ctx.time$), \" m\\u00E1sodperc\");\n    }\n  },\n  dependencies: [i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyb2xleC5jb21wb25lbnQuY3NzIn0= */\"]\n});\nthis.time$ = this.StateService.clock$.pipe(filter(t => {\n  t % 5 === 0;\n}));","map":{"version":3,"mappings":"AAEA,SAASA,MAAT,EAAuBC,YAAvB,EAAqCC,UAArC,QAAuD,MAAvD;;;;AAOA,OAAM,MAAOC,cAAP,CAAqB;EAKzBC,YAAoBC,YAApB,EAA8C;IAA1B;IAJpB,YAAe,CAAf;IAEA,aAA4B,IAAIH,UAAJ,EAA5B;EAEkD;;EAElDI,QAAQ,IAEN;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EAED;;AA1BwB;;;mBAAdH,gBAAcI;AAAA;;;QAAdJ;EAAcK;EAAAC;EAAAC;EAAAC;IAAA;MCP3BJ;MAAGA;;MAAuCA;;;;MAAvCA;MAAAA;;;;;;ADkCD,KAAKK,KAAL,GAAa,KAAKC,YAAL,CAAkBC,MAAlB,CAAyBC,IAAzB,CACXf,MAAM,CAAEgB,CAAD,IAAM;EAAEA,CAAC,GAAG,CAAJ,KAAU,CAAV;AAAY,CAArB,CADK,CAAb","names":["filter","Subscription","Observable","RolexComponent","constructor","stateService","ngOnInit","i0","selectors","decls","vars","template","time$","StateService","clock$","pipe","t"],"sourceRoot":"","sources":["C:\\Users\\A117894583\\Desktop\\Angular_academy\\AngularAkademia2022\\counter-practice\\src\\app\\solution2\\rolex\\rolex.component.ts","C:\\Users\\A117894583\\Desktop\\Angular_academy\\AngularAkademia2022\\counter-practice\\src\\app\\solution2\\rolex\\rolex.component.html"],"sourcesContent":["import { StateService } from './../services/state.service';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { filter, pipe, Subscription, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-rolex',\n  templateUrl: './rolex.component.html',\n  styleUrls: ['./rolex.component.css'],\n})\nexport class RolexComponent implements OnInit /*OnDestroy*/ {\n  time: number = 0;\n  clockSubscription?: Subscription;\n  time$: Observable<number> = new Observable();\n\n  constructor(private stateService: StateService) {}\n\n  ngOnInit(): void {\n\n    //Megoldás1\n    //   this.stateService.clock$.subscribe((t) => {\n    //     this.time = t - t % 5,\n\n    //     if (t % 5 === 0 && t > 0) {\n    //       console.log(t ===0 ? 'Kezdés' : 'Váltás' ${t - 5} '->' ${t});\n\n    //     }\n    //   });\n    // }\n\n    //megoldás2\n    // this.clockSubscription = this.stateService.clock$.pipe(filter((t) => t % 5 === 0)).subscribe((t) => {\n    //   console.log(t === 0 ? `kezdés` : `váltás ${t - 5} -> ${t}`);\n    //   this.time = t;\n    // });\n\n  }\n  this.time$ = this.StateService.clock$.pipe (\n    filter((t) => {t % 5 === 0} ),\n  );\n\n  //megoldás2\n// ngOnDestroy(): void {\n//   this.clockSubscription?.unsubscribe();\n\n// }\n\n}\n","<!-- <p>Eltelt idő: {{time}} másodperc</p> -->\r\n\r\n<p>Eltelt idő: {{time$ | async}} másodperc</p>\r\n\r\n"]},"metadata":{},"sourceType":"module"}